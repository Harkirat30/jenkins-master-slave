pipeline {
    agent {
        kubernetes {
            cloud 'jenkins-gke'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent-harkirat
spec:
  serviceAccountName: jenkins-sa
  containers:
  - name: jnlp
    image: us-central1-docker.pkg.dev/pod-x-harkirat-singh/owasp/owasp-image:v6
    securityContext:
      runAsUser: 0
    imagePullPolicy: Always
    args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run/docker.sock
    - name: gcloud-config
      mountPath: /root/.config
  volumes:
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
      type: Socket
  - name: gcloud-config
    emptyDir: {}
"""
        }
    }
    environment {
        ZAP_HOST = "zap.jenkins.svc.cluster.local"
        ZAP_PORT = "8080"
        TARGET_URL = "http://10.52.5.205"  // URL to scan
    }
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: 'https://github.com/Harkirat30/jenkins-master-slave.git']]])
            }
        }

        stage('Wait for ZAP Service') {
            steps {
                script {
                    // Wait to ensure ZAP service is up and running
                    sh 'sleep 30'
                }
            }
        }

        stage('Run ZAP Scan') {
            steps {
                script {
                    // Run the ZAP CLI scan
                    sh """
                    echo "Running ZAP scan on ${env.TARGET_URL}..."
                    zap-cli --zap-url=http://\$ZAP_HOST --port=\$ZAP_PORT open-url ${env.TARGET_URL}
                    zap-cli --zap-url=http://\$ZAP_HOST --port=\$ZAP_PORT active-scan ${env.TARGET_URL}
                    """
                }
            }
        }

        stage('Generate Report') {
            steps {
                script {
                    // Generate HTML report using ZAP CLI
                    sh """
                    echo "Generating ZAP report..."
                    zap-cli --zap-url=http://\$ZAP_HOST --port=\$ZAP_PORT report -o zap-report.html -f html
                    """
                    // Archive the report as an artifact
                    archiveArtifacts artifacts: 'zap-report.html', allowEmptyArchive: true
                }
            }
        }
    }
}
